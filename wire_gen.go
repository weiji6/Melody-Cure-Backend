// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"melody_cure/DAO"
	"melody_cure/config"
	"melody_cure/controller"
	"melody_cure/middleware"
	"melody_cure/routes"
	"melody_cure/service"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	db, err := DAO.NewDB()
	if err != nil {
		return nil, err
	}
	userDAO := DAO.NewUserDAO(db)
	jwtClient := NewJwtClient()
	user := service.NewUser(userDAO, jwtClient)
	controllerUser := controller.NewUserController(user)
	healingLogDAO := DAO.NewHealingLogDAO(db)
	healingLogService := service.NewHealingLogService(healingLogDAO)
	healingLogController := controller.NewHealingLogController(healingLogService)
	childArchiveController := controller.NewChildArchiveController(user)
	generatedReportDAO := DAO.NewGeneratedReportDAO(db)
	aiReportService := service.NewAIReportService(generatedReportDAO, healingLogDAO)
	aiReportController := controller.NewAIReportController(aiReportService)
	engine := NewEngine(controllerUser, healingLogController, childArchiveController, aiReportController, jwtClient)
	app := &App{
		Engine: engine,
	}
	return app, nil
}

// wire.go:

type App struct {
	Engine *gin.Engine
}

var ProviderSet = wire.NewSet(DAO.NewDB, DAO.NewUserDAO, DAO.NewHealingLogDAO, DAO.NewGeneratedReportDAO, service.NewUser, service.NewHealingLogService, service.NewImageService, service.NewOtherService, service.NewAIReportService, controller.NewUserController, controller.NewHealingLogController, controller.NewChildArchiveController, controller.NewAIReportController, NewJwtClient,
	NewEngine, wire.Struct(new(App), "Engine"), wire.Bind(new(service.UserService), new(*service.User)),
)

func NewJwtClient() *middleware.JwtClient {
	return &middleware.JwtClient{SecretKey: config.GetJWTConfig().SecretKey}
}

func NewEngine(
	userController *controller.User,
	healingLogController *controller.HealingLogController,
	childArchiveController *controller.ChildArchiveController,
	aiReportController *controller.AIReportController,
	jwtClient *middleware.JwtClient,
) *gin.Engine {
	r := gin.Default()
	routes.SetupUserRoutes(r, userController, jwtClient)
	routes.SetupHealingLogRoutes(r, healingLogController, jwtClient)
	routes.SetupChildArchiveRoutes(r, childArchiveController, jwtClient)
	routes.SetupAIReportRoutes(r, aiReportController, jwtClient)

	return r
}
