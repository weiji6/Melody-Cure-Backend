// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
	"melody_cure/DAO"
	"melody_cure/controller"
	"melody_cure/middleware"
	"melody_cure/routes"
	"melody_cure/service"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	jwtClient := ProvideJwtClient()
	userService := ProvideUserService(jwtClient)
	user := ProvideUserController(userService)
	imageService := ProvideImageService()
	imageController := ProvideImageController(imageService)
	healingLogDAO := ProvideHealingLogDAO()
	healingLogService := ProvideHealingLogService(healingLogDAO)
	healingLogController := ProvideHealingLogController(healingLogService)
	engine := ProvideEngine(user, imageController, healingLogController, jwtClient)
	app := &App{
		Engine: engine,
	}
	return app, nil
}

// wire.go:

type App struct {
	Engine *gin.Engine
}

func ProvideJwtClient() *middleware.JwtClient {
	return &middleware.JwtClient{SecretKey: viper.GetString("JWT.secretKey")}
}

func ProvideUserService(jwt *middleware.JwtClient) service.UserService {
	return service.NewUser(DAO.NewUserDAO(DAO.DB), jwt)
}

func ProvideUserController(svc service.UserService) *controller.User {
	return controller.NewUserController(svc)
}

func ProvideImageService() *service.ImageService {
	return service.NewImageService()
}

func ProvideImageController(imageService *service.ImageService) *controller.ImageController {
	return controller.NewImageController(imageService)
}

func ProvideHealingLogDAO() *DAO.HealingLogDAO {
	return DAO.NewHealingLogDAO(DAO.DB)
}

func ProvideHealingLogService(healingLogDAO *DAO.HealingLogDAO) *service.HealingLogService {
	return service.NewHealingLogService(healingLogDAO)
}

func ProvideHealingLogController(healingLogService *service.HealingLogService) *controller.HealingLogController {
	return controller.NewHealingLogController(healingLogService)
}

func ProvideEngine(uc *controller.User, ic *controller.ImageController, hlc *controller.HealingLogController, jwt *middleware.JwtClient) *gin.Engine {
	r := gin.Default()
	routes.SetupUserRoutes(r, uc, jwt)
	routes.SetupImageRoutes(r, ic, jwt)
	routes.SetupHealingLogRoutes(r, hlc, jwt)

	return r
}
